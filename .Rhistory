})
#-------------------------------------------------------
# make some plots
# plot article count in year range
library(ggplot2)
output$my_plot <-
renderPlot({
# plot the number of articles per year with the search term
# over the total number of articles per year
library(ggplot2)
my_data <- my_data()
my_data_term <- my_data_term()
my_plot <-
ggplot() +
geom_col(data = my_data,
aes(Year,
articles_per_year),
fill = "grey80") +
geom_col(data = my_data_term,
aes(Year,
articles_per_year),
fill = "black") +
# add the number of articles as text at the top of the bars
geom_text(data = my_data,
aes(Year,
articles_per_year - (articles_per_year * 0.2),
label = articles_per_year),
size = 3) +
geom_text(data = my_data_term,
aes(Year,
articles_per_year - (articles_per_year * 0.2),
label = articles_per_year),
size = 4,
colour = "white") +
theme_bw() +
scale_x_continuous(labels = lab_brk(),
breaks = lab_brk() ) +
scale_y_log10() +
theme(axis.text.x = element_text( angle = 90,
vjust = 0.5,
hjust = 0)) +
# make a title for the plot
ggtitle(paste0('All SOCI articles on Scopus with "',
input$the_term,
'" in TITLE-ABS-KEY during ',
input$year_slider[1],
'-',
input$year_slider[2],
' (n = ', prettyNum(sum(my_data_term$articles_per_year),
big.mark = ","),
" out of ",
prettyNum(sum(my_data$articles_per_year),
big.mark = ","),
" articles in total)"))
print(my_plot)
})
# citation rates for all articles vs articles with the search term
output$my_plot_citations <-
renderPlot({
my_data <- my_data()
my_data_term <- my_data_term()
cites_per_year_all <- cites_per_year_all()
# count the number of articles for each year
cites_per_year_all$group <- as.character(cites_per_year_all$group)
# plot the number of articles per year with the search term
# over the total number of articles per year
library(ggplot2)
my_plot <-
ggplot(cites_per_year_all,
aes(as.character(Year),
`Cited by`,
colour = group
)) +
geom_boxplot() +
theme_bw() +
scale_colour_manual(values = c("grey80",
"black")) +
scale_fill_manual(values = c(alpha("grey80", 0.000001),
"black")) +
scale_x_discrete(labels = lab_brk(),
breaks = lab_brk() ) +
scale_y_log10() +
theme(axis.text.x = element_text( angle = 90,
vjust = 0.5,
hjust = 0)) +
# suppress the legend
guides(colour = "none") +
# make a title for the plot
# make a title for the plot
ggtitle(paste0('All SOCI articles on Scopus with at least one citation containing "',
input$the_term,
'" in TITLE-ABS-KEY \nduring ',
input$year_slider[1],
'-',
input$year_slider[2],
' (n = ', prettyNum(sum(my_data_term$articles_per_year),
big.mark = ","),
" out of ",
prettyNum(sum(my_data$articles_per_year),
big.mark = ","),
" articles in total)"))
print(my_plot)
})
# word cloud of frequent words in titles
output$my_plot_wordcloud <-
renderPlot({
library(tidytext)
library(wordcloud)
library(viridis)
my_data_citation_term_top_cited <- my_data_citation_term_top_cited()
my_data_term_top_cites <-
my_data_citation_term_top_cited %>%
filter(`Cited by` >= 10)
my_data_term_top_cites %>%
unnest_tokens(word, Title)  %>%
anti_join(bind_rows(stop_words,
data_frame(word = c(
"elsevier",
"2006",
"2008",
"2009",
"2010",
"2011",
"2012",
"sas",
"va",
"als",
"tls"),
lexicon = "0")))  %>%
dplyr::count(word, sort = TRUE) %>%
with(wordcloud( paste0(word, " (", n, ")"),
n,
#max.words = 20,
min.freq = 2,
random.order = FALSE,
random.color = FALSE,
rot.per= 0,
scale = c(8, 0.3),
colors = plasma(10)))
})
# what are the most popular words each decade
output$my_plot_pop_words <-
renderPlot({
scopus_all_archaeology_year_range <- scopus_all_archaeology_year_range()
# top words per n years
n <- 5
scopus_all_archaeology_top_words_per_decade <-
scopus_all_archaeology_year_range %>%
mutate(decade = round_any(Year, n, floor)) %>%
select(Title, Year, decade) %>%
unnest_tokens(word, Title) %>%
anti_join(bind_rows(stop_words,
data_frame(word = c(
"elsevier",
"archaeology",
"archaeological",
"archeology",
"de",
"la",
"en",
"el",
"del",
"der",
"analysis",
"age",
"study",
"site",
"history",
"ancient",
"2006",
"2008",
"2009",
"2010",
"2011",
"2012",
"sas",
"va",
"als",
"tls"),
lexicon = "0"))) %>%
group_by(decade) %>%
count(word, sort = TRUE) %>%
arrange(desc(n)) %>%
slice(1:10) %>%
mutate(ranks = rank(n, ties.method = "random")) %>%
mutate(rev_rank = 11 - ranks) %>%
mutate(word = gsub("\\d", "", word)) %>%
mutate(sizes = as.numeric(scale(ranks, 0, 5) ))
my_plot <-
ggplot(scopus_all_archaeology_top_words_per_decade,
aes(decade,
rev_rank,
label = word
)) +
geom_text(size = scopus_all_archaeology_top_words_per_decade$sizes + 2,
position = position_jitter(width = 0.1,
height = 0.1)) +
theme_bw() +
scale_y_reverse()
print(my_plot)
})
}
year_range <- reactive({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
})
year_range
year_range()
runApp()
runExample()
runExample("03_reactivity")
year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
})
year_range
year_range()
runApp()
runApp()
isolate({
# renderPrint captures any print output, converts it to a string, and
# returns it
visFun <- renderPrint({ "foo" })
visFun()})
isolate({
# renderPrint captures any print output, converts it to a string, and
# returns it
scopus_data <- reactive({
scopus_data <-  readr::read_csv("scopus_all_archaeology.csv")
scopus_data
})
scopus_data() })
scopus_data <-  readr::read_csv("scopus_all_archaeology.csv")
scopus_data
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}) })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
range(scopus_data_tbl$Year)
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
range(scopus_data_tbl$Year)
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
xx <- range(scopus_data_tbl$Year)
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
xx <- range(scopus_data_tbl$Year) ; return(xx)
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
xx <- range(scopus_data_tbl$Year) ; xx ;
}) year_range() })
isolate({year_range <- renderPrint({ scopus_data_tbl <- scopus_data();
xx <- range(scopus_data_tbl$Year) ; xx ;
}) year_range() })
year_range
isolate({
# renderPrint captures any print output, converts it to a string, and
# returns it
visFun <- renderPrint({ "foo" })
visFun()
# '[1] "foo"' })
isolate({
# renderPrint captures any print output, converts it to a string, and
# returns it
visFun <- renderPrint({ "foo" })
visFun() })
# '[1] "foo"'
isolate({
year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
})
})
year_range()
year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
})
isolate({
year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
scopus_data <- reactive({
scopus_data <-  readr::read_csv("scopus_all_archaeology.csv")
scopus_data
})
year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
invisible({ year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
isolate({ year_range <- renderPrint({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
isolate({ year_range <- renderText({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
runApp()
isolate({ year_range <- renderText({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}); year_range() })
values <- reactiveValues(a = 1, b = 2)
isolate(values$a)
values$a
runApp()
isolate({ year_range <- reactiveValues({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}) year_range })
isolate({ year_range <- reactiveValues({ scopus_data_tbl <- scopus_data();
range(scopus_data_tbl$Year)
}) year_range })
isolate({ year_range <- reactiveValues({ scopus_data_tbl <- scopus_data();
range(scopus_data_tbl$Year)
}) year_range })
isolate({})
isolate({})
isolate({
year_range <- reactiveValues({ scopus_data_tbl <- scopus_data()
range(scopus_data_tbl$Year)
}) ; year_range()
})
range(scopus_data_tbl()$Year)
scopus_data <- reactive({
scopus_data <-  readr::read_csv("scopus_all_archaeology.csv")
scopus_data
})
range(scopus_data()$Year)
isolate(range(scopus_data()$Year))
runApp()
values <- reactiveValues(A=1)
values
reactiveB <- reactive({
values$A + 1
})
reactiveB <- reactive({
values$A + 1
})
reactiveB
isolate(reactiveB)
isolate(reactiveA)
isolate(values)
isolate(values$A)
year_range <- reactiveValues({
range_ <- range(scopus_data()$Year)
range_
})
isolate({})
isolate({
year_range <- reactiveValues({
range_ <- range(scopus_data()$Year)
range_
}) })
isolate({ year_range <- reactiveValues({
range_ = range(scopus_data()$Year)
range_
}) })
isolate({ year_range <- reactiveValues({
range_ = range(scopus_data()$Year)
}) })
runApp()
runApp()
?round_any
runApp()
library(readr)
library(plyr)
library(tidyverse)
scopus <- read_csv("scopus.csv")
scopus_all_archaeology_all <- read_csv("scopus_all_archaeology.csv")
scopus_all_jas <- read_csv("scopus_all_JAS.csv")
n <- 5
scopus_all_archaeology_top_words_per_decade <-
scopus_all_archaeology_all %>%
mutate(decade = round_any(Year, n, floor)) %>%
select(Title, Year, decade) %>%
unnest_tokens(word, Title) %>%
anti_join(bind_rows(stop_words,
data_frame(word = c(
"elsevier",
"archaeology",
"archaeological",
"archeology",
"archÃ¦ology",
"de",
"la",
"en",
"el",
"del",
"der",
"analysis",
"age",
"study",
"site",
"history",
"ancient",
"2006",
"2008",
"2009",
"2010",
"2011",
"2012",
"sas",
"va",
"als",
"tls"),
lexicon = "0"))) %>%
group_by(decade) %>%
count(word, sort = TRUE) %>%
arrange(desc(n)) %>%
slice(1:10) %>%
mutate(ranks = rank(n, ties.method = "random")) %>%
mutate(rev_rank = 11 - ranks) %>%
mutate(word = gsub("\\d", "", word)) %>%
mutate(sizes = as.numeric(scale(ranks, 0, 5) ))
?count
"elsevier",
"archaeology",
"archaeological",
"archeology",
"archÃ¦ology",
"de",
"la",
"en",
"el",
"del",
"der",
"analysis",
"age",
"study",
"site",
"history",
"ancient",
"2006",
"2008",
"2009",
"2010",
"2011",
"2012",
"sas",
"va",
"als",
"tls"),
lexicon = "0"))) %>%
group_by(decade) %>%
dplyr::count(word, sort = TRUE) %>%
arrange(desc(n)) %>%
slice(1:10) %>%
mutate(ranks = rank(n, ties.method = "random")) %>%
mutate(rev_rank = 11 - ranks) %>%
mutate(word = gsub("\\d", "", word)) %>%
mutate(sizes = as.numeric(scale(ranks, 0, 5) ))
scopus_all_archaeology_top_words_per_decade <-
scopus_all_archaeology_all %>%
mutate(decade = round_any(Year, n, floor)) %>%
select(Title, Year, decade) %>%
unnest_tokens(word, Title) %>%
anti_join(bind_rows(stop_words,
data_frame(word = c(
"elsevier",
"archaeology",
"archaeological",
"archeology",
"archÃ¦ology",
"de",
"la",
"en",
"el",
"del",
"der",
"analysis",
"age",
"study",
"site",
"history",
"ancient",
"2006",
"2008",
"2009",
"2010",
"2011",
"2012",
"sas",
"va",
"als",
"tls"),
lexicon = "0"))) %>%
group_by(decade) %>%
dplyr::count(word, sort = TRUE) %>%
arrange(desc(n)) %>%
slice(1:10) %>%
mutate(ranks = rank(n, ties.method = "random")) %>%
mutate(rev_rank = 11 - ranks) %>%
mutate(word = gsub("\\d", "", word)) %>%
mutate(sizes = as.numeric(scale(ranks, 0, 5) ))
ggplot(scopus_all_archaeology_top_words_per_decade,
aes(decade,
rev_rank,
label = word
)) +
geom_text(size = scopus_all_archaeology_top_words_per_decade$sizes + 2,
position = position_jitter(width = 0.1,
height = 0.1)) +
theme_bw() +
scale_y_reverse()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?xlim
runApp()
